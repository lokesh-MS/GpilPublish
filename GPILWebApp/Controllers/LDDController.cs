using GPILWebApp.Models;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Data;
using GPILWebApp.ViewModel;
using GPI;
using System.IO;
using System.Configuration;
using System.Data.OleDb;
using System.ComponentModel;

namespace GPILWebApp.Controllers
{
    public class LDDController : Controller
    {
        private GREEN_LEAF_TRACEABILITYEntities _context;
        public LDDController()
        {
            _context = new GREEN_LEAF_TRACEABILITYEntities();
        }
        protected override void Dispose(bool disposing)
        {
            _context.Dispose();
        }
        // GET: LDD


        /// <summary>
        /// Farmer Purchase Slip
        /// </summary>
        /// <returns></returns>
        public ActionResult FarmerPurchaseSlipIndex()
        {

            return View();
        }

        /// <summary>
        /// FARMERPURCHASE PENDING BALES
        /// </summary>
        /// <returns></returns>
        public ActionResult FarmerPurchasePendingBalesIndex()
        {
            ViewBag.GPIL_ORGN_MASTER = (from s in _context.GPIL_ORGN_MASTER where s.STATUS == "Y" select new { ORGN_CODE1 = s.ORGN_CODE + " - " + s.ORGN_NAME, s.ORGN_CODE }).ToList();
            return View();
        }

        [HttpGet]
        // GET: LD/PendingBales/a/a
        public ActionResult PendingBales(string headerid, string ReportType)
        {
            LDDManagement lddMgt = new LDDManagement();
            DataTable ds1 = new DataTable();
            // string RejectionType = "OK";
            string query = "";


            if (ReportType == "Non_Purchaseable")
            {
                query = "SELECT ROW_NUMBER() OVER(ORDER BY GPIL_BALE_NUMBER) AS SNO,GPIL_BALE_NUMBER,REJE_TYPE,TB_LOT_NO,ATTRIBUTE3 AS SERIAL_NO,FARMER_CODE,NET_WT,ATTRIBUTE4 AS RATE,RATE AS RATE_WITH_FREIGHT,BUYER_GRADE,ATTRIBUTE2 AS CLASSIFICATION_GRADE FROM GPIL_TAP_FARM_PURCHS_DTLS WHERE HEADER_ID='" + headerid + "' AND REJE_STATUS='OK' AND (RATE IS NULL or RATE =0) ORDER BY CONVERT(INT,TB_LOT_NO),CONVERT(INT,ATTRIBUTE3) ";//AND RATE IS NULL ORDER BY CONVERT(INT,TB_LOT_NO),CONVERT(INT,ATTRIBUTE3)
            }
            else if (ReportType == "Un_Weighment")
            {
                query = "SELECT ROW_NUMBER() OVER(ORDER BY GPIL_BALE_NUMBER) AS SNO,GPIL_BALE_NUMBER,REJE_TYPE,TB_LOT_NO,ATTRIBUTE3 AS SERIAL_NO,FARMER_CODE,NET_WT,ATTRIBUTE4 AS RATE,RATE AS RATE_WITH_FREIGHT,BUYER_GRADE,ATTRIBUTE2 AS CLASSIFICATION_GRADE FROM GPIL_TAP_FARM_PURCHS_DTLS WHERE HEADER_ID='" + headerid + "' AND REJE_STATUS='OK' AND (NET_WT IS NULL or NET_WT = 0)  ORDER BY CONVERT(INT,TB_LOT_NO),CONVERT(INT,ATTRIBUTE3)";
            }
            else if (ReportType == "Rejection")
            {
                query = "SELECT ROW_NUMBER() OVER(ORDER BY GPIL_BALE_NUMBER) AS SNO,GPIL_BALE_NUMBER,REJE_TYPE,TB_LOT_NO,ATTRIBUTE3 AS SERIAL_NO,FARMER_CODE,NET_WT,ATTRIBUTE4 AS RATE,RATE AS RATE_WITH_FREIGHT,BUYER_GRADE,ATTRIBUTE2 AS CLASSIFICATION_GRADE FROM GPIL_TAP_FARM_PURCHS_DTLS WHERE HEADER_ID='" + headerid + "' AND REJE_STATUS='RJ' ORDER BY CONVERT(INT,TB_LOT_NO),CONVERT(INT,ATTRIBUTE3)";
            }

            ds1 = lddMgt.GetQueryResult(query);

            string json = JsonConvert.SerializeObject(ds1);
            return Json(json, JsonRequestBehavior.AllowGet);
            //return Json(new { result = "Redirect", url = Url.Action("FarmerPurchasePendingBalesIndex", "LDD") });

        }

        /// <summary>
        /// Farmer Purchase Slip with Loan
        /// </summary>
        /// <returns></returns>

        public ActionResult FarmerPurchaseVerificationSlipByDateIndex()
        {

            return View();
        }

        /// <summary>
        /// Farmer Purchase Verification Slip
        /// </summary>
        /// <returns></returns>
        public ActionResult FarmerPurchaseVerificationBySlipIndex()
        {

            return View();
        }


        /// <summary>
        /// Farmer Purchase Summary details
        /// </summary>
        /// <returns></returns>
        public ActionResult FarmerPurchaseSummaryDetailsIndex()
        {

            return View();
        }


        [HttpGet]

        public ActionResult FarmerPurchaseSummary(string PurchaseNO, string ReportType)
        {
            LDDManagement lddMgt = new LDDManagement();
            DataTable ds1 = new DataTable();
            //string RejectionType = "OK";
            string query = "";

            if (ReportType == "Accountable_Farmer")
            {
                // query = "SELECT ROW_NUMBER() OVER(ORDER BY FARMER_CODE) AS SNO, FARMER_CODE,F.FARM_NAME,F.FARM_FATHER_NAME AS FATHER_NAME,(F.BANK_NAME + ',' + CHAR(13) + CHAR(10) + F.BRANCH_NAME) AS BANK_DETAILS,F.BANK_ACCOUNT_NO,F.IFSC_CODE,COUNT(GPIL_BALE_NUMBER) AS BALE_COUNT,ROUND(ISNULL(SUM(NET_WT),0),2) AS QUANTITY,ROUND(ISNULL(SUM(NET_WT*RATE),0)/ISNULL(SUM(NET_WT),0),6) AS AVE_PRICE,FF.FREIGHT_CHARGE AS FREIGHT_CHARGE,ROUND(ISNULL(SUM(NET_WT*RATE),0),2) AS TOTAL_VALUE  FROM  GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D, GPIL_FARMER_MASTER F,GPIL_ORGN_MASTER O,GPIL_CROP_MASTER C,GPIL_VARIETY_MASTER V,GPIL_FARMER_FREIGHT_MASTER FF,GPIL_USER_MASTER U WHERE H.HEADER_ID=D.HEADER_ID AND D.HEADER_ID='" + txtPurchaseReference.Text + "' AND (F.BANK_ACCOUNT_NO IS NOT NULL AND F.BANK_ACCOUNT_NO <>'') AND REJE_STATUS='OK' AND U.USER_ID=H.BUYER_CODE AND FF.FARM_CODE=F.FARM_CODE AND FF.ORGN_CODE=H.ORGN_CODE AND C.CROP=H.CROP AND V.VARIETY=H.VARIETY AND O.ORGN_CODE=H.ORGN_CODE AND  F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,F.FARM_FATHER_NAME,F.FARM_NAME,F.BANK_ACCOUNT_NO,F.BANK_NAME,F.BRANCH_NAME,F.IFSC_CODE,FF.FREIGHT_CHARGE";
                // query = "SELECT ROW_NUMBER() OVER(ORDER BY FARMER_CODE) AS SNO, FARMER_CODE,F.FARM_NAME,F.FARM_FATHER_NAME AS FATHER_NAME,(F.BANK_NAME + ',' + CHAR(13) + CHAR(10) + F.BRANCH_NAME) AS BANK_DETAILS,F.BANK_ACCOUNT_NO,F.IFSC_CODE,COUNT(GPIL_BALE_NUMBER) AS BALE_COUNT,ROUND(ISNULL(SUM(NET_WT),0),2) AS QUANTITY,ROUND(ISNULL(SUM(NET_WT*RATE),0)/ISNULL(SUM(NET_WT),0),6) AS AVE_PRICE,FF.FREIGHT_CHARGE AS FREIGHT_CHARGE,ROUND(ISNULL(SUM(NET_WT*RATE),0),2) AS TOTAL_VALUE  FROM  GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D, GPIL_FARMER_MASTER F,GPIL_ORGN_MASTER O,GPIL_CROP_MASTER C,GPIL_VARIETY_MASTER V,GPIL_FARMER_FREIGHT_CHARGE_MASTER FF,GPIL_USER_MASTER U WHERE H.HEADER_ID=D.HEADER_ID AND D.HEADER_ID='" + txtPurchaseReference.Text + "' AND (F.BANK_ACCOUNT_NO IS NOT NULL AND F.BANK_ACCOUNT_NO <>'') AND REJE_STATUS='OK' AND U.USER_ID=H.BUYER_CODE AND FF.VILLAGE_CODE=F.VILLAGE_CODE AND FF.ORGN_CODE=H.ORGN_CODE AND FF.CROP=H.CROP AND FF.VARIETY=H.VARIETY AND C.CROP=H.CROP AND V.VARIETY=H.VARIETY AND O.ORGN_CODE=H.ORGN_CODE AND  F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,F.FARM_FATHER_NAME,F.FARM_NAME,F.BANK_ACCOUNT_NO,F.BANK_NAME,F.BRANCH_NAME,F.IFSC_CODE,FF.FREIGHT_CHARGE";
                query = "SELECT ROW_NUMBER() OVER(ORDER BY FARMER_CODE) AS SNO, FARMER_CODE,FM.FARM_NAME,FM.FARM_FATHER_NAME AS FATHER_NAME,(F.BANK_NAME + ',' + CHAR(13) + CHAR(10) + F.BRANCH_NAME) AS BANK_DETAILS,F.BANK_ACCOUNT_NO,F.IFSC_CODE,COUNT(GPIL_BALE_NUMBER) AS BALE_COUNT,ROUND(ISNULL(SUM(NET_WT),0),2) AS QUANTITY,ROUND(ISNULL(SUM(NET_WT*RATE),0)/ISNULL(SUM(NET_WT),0),6) AS AVE_PRICE,FF.FREIGHT_CHARGE AS FREIGHT_CHARGE,ROUND(ISNULL(SUM(NET_WT*RATE),0),2) AS TOTAL_VALUE  FROM  GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D, GPIL_FARMER_MASTER FM,GPIL_FARMER_CROP_HISTORY F,GPIL_ORGN_MASTER O,GPIL_CROP_MASTER C,GPIL_VARIETY_MASTER V,GPIL_FARMER_FREIGHT_CHARGE_MASTER FF,GPIL_USER_MASTER U WHERE H.HEADER_ID=D.HEADER_ID AND F.FARM_CODE=FM.FARM_CODE AND D.HEADER_ID='" + PurchaseNO + "' AND (F.BANK_ACCOUNT_NO IS NOT NULL AND F.BANK_ACCOUNT_NO <>'') AND REJE_STATUS='OK' AND U.USER_ID=H.BUYER_CODE AND FF.VILLAGE_CODE=FM.VILLAGE_CODE AND FF.ORGN_CODE=H.ORGN_CODE AND F.CROP=H.CROP AND F.VARIETY=H.VARIETY AND FF.CROP=H.CROP AND FF.VARIETY=H.VARIETY AND C.CROP=H.CROP AND V.VARIETY=H.VARIETY AND O.ORGN_CODE=H.ORGN_CODE AND  F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,FM.FARM_FATHER_NAME,FM.FARM_NAME,F.BANK_ACCOUNT_NO,F.BANK_NAME,F.BRANCH_NAME,F.IFSC_CODE,FF.FREIGHT_CHARGE";
            }
            else if (ReportType == "Non-Accountable_Farmer")
            {
                //query = "SELECT ROW_NUMBER() OVER(ORDER BY FARMER_CODE) AS SNO, FARMER_CODE,F.FARM_NAME,F.FARM_FATHER_NAME AS FATHER_NAME,(F.BANK_NAME + ',' + CHAR(13) + CHAR(10) + F.BRANCH_NAME) AS BANK_DETAILS,F.BANK_ACCOUNT_NO,F.IFSC_CODE,COUNT(GPIL_BALE_NUMBER) AS BALE_COUNT,ROUND(ISNULL(SUM(NET_WT),0),2) AS QUANTITY,ROUND(ISNULL(SUM(NET_WT*RATE),0)/ISNULL(SUM(NET_WT),0),6) AS AVE_PRICE,FF.FREIGHT_CHARGE AS FREIGHT_CHARGE,ROUND(ISNULL(SUM(NET_WT*RATE),0),2) AS TOTAL_VALUE   FROM  GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D, GPIL_FARMER_MASTER F,GPIL_ORGN_MASTER O,GPIL_CROP_MASTER C,GPIL_VARIETY_MASTER V,GPIL_FARMER_FREIGHT_MASTER FF,GPIL_USER_MASTER U WHERE H.HEADER_ID=D.HEADER_ID AND D.HEADER_ID='" + txtPurchaseReference.Text + "' AND (F.BANK_ACCOUNT_NO IS NULL OR F.BANK_ACCOUNT_NO ='') AND REJE_STATUS='OK' AND U.USER_ID=H.BUYER_CODE AND FF.FARM_CODE=F.FARM_CODE AND FF.ORGN_CODE=H.ORGN_CODE AND C.CROP=H.CROP AND V.VARIETY=H.VARIETY AND O.ORGN_CODE=H.ORGN_CODE AND  F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,F.FARM_FATHER_NAME,F.FARM_NAME,F.BANK_ACCOUNT_NO,F.BANK_NAME,F.BRANCH_NAME,F.IFSC_CODE,FF.FREIGHT_CHARGE";
                //query = "SELECT ROW_NUMBER() OVER(ORDER BY FARMER_CODE) AS SNO, FARMER_CODE,F.FARM_NAME,F.FARM_FATHER_NAME AS FATHER_NAME,(F.BANK_NAME + ',' + CHAR(13) + CHAR(10) + F.BRANCH_NAME) AS BANK_DETAILS,F.BANK_ACCOUNT_NO,F.IFSC_CODE,COUNT(GPIL_BALE_NUMBER) AS BALE_COUNT,ROUND(ISNULL(SUM(NET_WT),0),2) AS QUANTITY,ROUND(ISNULL(SUM(NET_WT*RATE),0)/ISNULL(SUM(NET_WT),0),6) AS AVE_PRICE,FF.FREIGHT_CHARGE AS FREIGHT_CHARGE,ROUND(ISNULL(SUM(NET_WT*RATE),0),2) AS TOTAL_VALUE   FROM  GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D, GPIL_FARMER_MASTER F,GPIL_ORGN_MASTER O,GPIL_CROP_MASTER C,GPIL_VARIETY_MASTER V,GPIL_FARMER_FREIGHT_CHARGE_MASTER FF,GPIL_USER_MASTER U WHERE H.HEADER_ID=D.HEADER_ID AND D.HEADER_ID='" + txtPurchaseReference.Text + "' AND (F.BANK_ACCOUNT_NO IS NULL OR F.BANK_ACCOUNT_NO ='') AND REJE_STATUS='OK' AND U.USER_ID=H.BUYER_CODE AND FF.VILLAGE_CODE=F.VILLAGE_CODE AND FF.ORGN_CODE=H.ORGN_CODE AND FF.CROP=H.CROP AND FF.VARIETY=H.VARIETY AND C.CROP=H.CROP AND V.VARIETY=H.VARIETY AND O.ORGN_CODE=H.ORGN_CODE AND  F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,F.FARM_FATHER_NAME,F.FARM_NAME,F.BANK_ACCOUNT_NO,F.BANK_NAME,F.BRANCH_NAME,F.IFSC_CODE,FF.FREIGHT_CHARGE";
                query = "SELECT ROW_NUMBER() OVER(ORDER BY FARMER_CODE) AS SNO, FARMER_CODE,FM.FARM_NAME,FM.FARM_FATHER_NAME AS FATHER_NAME,(F.BANK_NAME + ',' + CHAR(13) + CHAR(10) + F.BRANCH_NAME) AS BANK_DETAILS,F.BANK_ACCOUNT_NO,F.IFSC_CODE,COUNT(GPIL_BALE_NUMBER) AS BALE_COUNT,ROUND(ISNULL(SUM(NET_WT),0),2) AS QUANTITY,ROUND(ISNULL(SUM(NET_WT*RATE),0)/ISNULL(SUM(NET_WT),0),6) AS AVE_PRICE,FF.FREIGHT_CHARGE AS FREIGHT_CHARGE,ROUND(ISNULL(SUM(NET_WT*RATE),0),2) AS TOTAL_VALUE   FROM  GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D, GPIL_FARMER_MASTER FM,GPIL_FARMER_CROP_HISTORY F,GPIL_ORGN_MASTER O,GPIL_CROP_MASTER C,GPIL_VARIETY_MASTER V,GPIL_FARMER_FREIGHT_CHARGE_MASTER FF,GPIL_USER_MASTER U WHERE H.HEADER_ID=D.HEADER_ID AND F.FARM_CODE=FM.FARM_CODE AND D.HEADER_ID='" + PurchaseNO + "' AND (F.BANK_ACCOUNT_NO IS NULL OR F.BANK_ACCOUNT_NO ='') AND REJE_STATUS='OK' AND U.USER_ID=H.BUYER_CODE AND FF.VILLAGE_CODE=FM.VILLAGE_CODE AND FF.ORGN_CODE=H.ORGN_CODE AND F.CROP=H.CROP AND F.VARIETY=H.VARIETY AND FF.CROP=H.CROP AND FF.VARIETY=H.VARIETY AND C.CROP=H.CROP AND V.VARIETY=H.VARIETY AND O.ORGN_CODE=H.ORGN_CODE AND  F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,FM.FARM_FATHER_NAME,FM.FARM_NAME,F.BANK_ACCOUNT_NO,F.BANK_NAME,F.BRANCH_NAME,F.IFSC_CODE,FF.FREIGHT_CHARGE";
            }
            else if ((ReportType == "All_Farmer"))
            {
                //query = "SELECT ROW_NUMBER() OVER(ORDER BY FARMER_CODE) AS SNO, FARMER_CODE,F.FARM_NAME,F.FARM_FATHER_NAME AS FATHER_NAME,(F.BANK_NAME + ',' + CHAR(13) + CHAR(10) + F.BRANCH_NAME) AS BANK_DETAILS,F.BANK_ACCOUNT_NO,F.IFSC_CODE,COUNT(GPIL_BALE_NUMBER) AS BALE_COUNT,ROUND(ISNULL(SUM(NET_WT),0),2) AS QUANTITY,ROUND(ISNULL(SUM(NET_WT*RATE),0)/ISNULL(SUM(NET_WT),0),6) AS AVE_PRICE,FF.FREIGHT_CHARGE AS FREIGHT_CHARGE,ROUND(ISNULL(SUM(NET_WT*RATE),0),2) AS TOTAL_VALUE   FROM  GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D, GPIL_FARMER_MASTER F,GPIL_ORGN_MASTER O,GPIL_CROP_MASTER C,GPIL_VARIETY_MASTER V,GPIL_FARMER_FREIGHT_MASTER FF,GPIL_USER_MASTER U WHERE H.HEADER_ID=D.HEADER_ID AND D.HEADER_ID='" + txtPurchaseReference.Text + "' AND REJE_STATUS='OK' AND U.USER_ID=H.BUYER_CODE AND FF.FARM_CODE=F.FARM_CODE AND FF.ORGN_CODE=H.ORGN_CODE AND C.CROP=H.CROP AND V.VARIETY=H.VARIETY AND O.ORGN_CODE=H.ORGN_CODE AND  F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,F.FARM_FATHER_NAME,F.FARM_NAME,F.BANK_ACCOUNT_NO,F.BANK_NAME,F.BRANCH_NAME,F.IFSC_CODE,FF.FREIGHT_CHARGE";
                //query = "SELECT ROW_NUMBER() OVER(ORDER BY FARMER_CODE) AS SNO, FARMER_CODE,F.FARM_NAME,F.FARM_FATHER_NAME AS FATHER_NAME,(F.BANK_NAME + ',' + CHAR(13) + CHAR(10) + F.BRANCH_NAME) AS BANK_DETAILS,F.BANK_ACCOUNT_NO,F.IFSC_CODE,COUNT(GPIL_BALE_NUMBER) AS BALE_COUNT,ROUND(ISNULL(SUM(NET_WT),0),2) AS QUANTITY,ROUND(ISNULL(SUM(NET_WT*RATE),0)/ISNULL(SUM(NET_WT),0),6) AS AVE_PRICE,FF.FREIGHT_CHARGE AS FREIGHT_CHARGE,ROUND(ISNULL(SUM(NET_WT*RATE),0),2) AS TOTAL_VALUE   FROM  GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D, GPIL_FARMER_MASTER F,GPIL_ORGN_MASTER O,GPIL_CROP_MASTER C,GPIL_VARIETY_MASTER V,GPIL_FARMER_FREIGHT_CHARGE_MASTER FF,GPIL_USER_MASTER U WHERE H.HEADER_ID=D.HEADER_ID AND D.HEADER_ID='" + txtPurchaseReference.Text + "' AND REJE_STATUS='OK' AND U.USER_ID=H.BUYER_CODE AND FF.VILLAGE_CODE=F.VILLAGE_CODE AND FF.ORGN_CODE=H.ORGN_CODE AND FF.CROP=H.CROP AND FF.VARIETY=H.VARIETY AND C.CROP=H.CROP AND V.VARIETY=H.VARIETY AND O.ORGN_CODE=H.ORGN_CODE AND  F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,F.FARM_FATHER_NAME,F.FARM_NAME,F.BANK_ACCOUNT_NO,F.BANK_NAME,F.BRANCH_NAME,F.IFSC_CODE,FF.FREIGHT_CHARGE";
                query = "SELECT ROW_NUMBER() OVER(ORDER BY FARMER_CODE) AS SNO, FARMER_CODE,FM.FARM_NAME,FM.FARM_FATHER_NAME AS FATHER_NAME,(F.BANK_NAME + ',' + CHAR(13) + CHAR(10) + F.BRANCH_NAME) AS BANK_DETAILS,F.BANK_ACCOUNT_NO,F.IFSC_CODE,COUNT(GPIL_BALE_NUMBER) AS BALE_COUNT,ROUND(ISNULL(SUM(NET_WT),0),2) AS QUANTITY,ROUND(ISNULL(SUM(NET_WT*RATE),0)/ISNULL(SUM(NET_WT),0),6) AS AVE_PRICE,FF.FREIGHT_CHARGE AS FREIGHT_CHARGE,ROUND(ISNULL(SUM(NET_WT*RATE),0),2) AS TOTAL_VALUE   FROM  GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D, GPIL_FARMER_MASTER FM,GPIL_FARMER_CROP_HISTORY F,GPIL_ORGN_MASTER O,GPIL_CROP_MASTER C,GPIL_VARIETY_MASTER V,GPIL_FARMER_FREIGHT_CHARGE_MASTER FF,GPIL_USER_MASTER U WHERE H.HEADER_ID=D.HEADER_ID AND F.FARM_CODE=FM.FARM_CODE AND D.HEADER_ID='" + PurchaseNO + "' AND REJE_STATUS='OK' AND U.USER_ID=H.BUYER_CODE AND FF.VILLAGE_CODE=FM.VILLAGE_CODE AND FF.ORGN_CODE=H.ORGN_CODE AND F.CROP=H.CROP AND F.VARIETY=H.VARIETY AND FF.CROP=H.CROP AND FF.VARIETY=H.VARIETY AND C.CROP=H.CROP AND V.VARIETY=H.VARIETY AND O.ORGN_CODE=H.ORGN_CODE AND  F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,FM.FARM_FATHER_NAME,FM.FARM_NAME,F.BANK_ACCOUNT_NO,F.BANK_NAME,F.BRANCH_NAME,F.IFSC_CODE,FF.FREIGHT_CHARGE";
            }




            ds1 = lddMgt.GetQueryResult(query);

            string json = JsonConvert.SerializeObject(ds1);
            return Json(json, JsonRequestBehavior.AllowGet);
            //return Json(new { result = "Redirect", url = Url.Action("FarmerPurchasePendingBalesIndex", "LDD") });

        }

        /// <summary>
        /// farmer Purchase Verification summary
        /// </summary>
        /// <returns></returns>
        public ActionResult FarmerPurchaseVerificationSummaryDetailsIndex()
        {

            return View();
        }



        [HttpGet]

        public ActionResult FarmerPurchaseVerificationSummary(string PurchaseNO, string ReportType)
        {
            LDDManagement lddMgt = new LDDManagement();
            DataTable ds1 = new DataTable();
            //string RejectionType = "OK";
            string query = "";

            if (ReportType == "Accountable_Farmer")
            {
                query = "SELECT ROW_NUMBER() OVER(ORDER BY FARMER_CODE) AS SNO, FARMER_CODE,FM.FARM_NAME,FM.FARM_FATHER_NAME AS FATHER_NAME,(F.BANK_NAME + ',' + CHAR(13) + CHAR(10) + F.BRANCH_NAME) AS BANK_DETAILS,F.BANK_ACCOUNT_NO,F.IFSC_CODE,COUNT(GPIL_BALE_NUMBER) AS BALE_COUNT,ROUND(ISNULL(SUM(NET_WT),0),2) AS QUANTITY,ROUND(ISNULL(SUM(NET_WT * RATE),0)/ISNULL(SUM(NET_WT),0),6) AS AVE_PRICE,FF.FREIGHT_CHARGE AS FREIGHT_CHARGE,ROUND(ISNULL(SUM(NET_WT * RATE),0),2) AS TOTAL_VALUE,(CASE WHEN FLT.LOAN_AMOUNT <= ROUND(ISNULL(SUM(NET_WT * RATE),0),2) THEN FLT.LOAN_AMOUNT ELSE ROUND(ISNULL(SUM(NET_WT * RATE),0),2) END) AS LOAN_AMOUNT,(CASE WHEN (ROUND(ISNULL(SUM(NET_WT * RATE),0),2)-FLT.LOAN_AMOUNT) > 0 THEN (ROUND(ISNULL(SUM(NET_WT * RATE),0),2)-FLT.LOAN_AMOUNT) ELSE '0' END) AS LOAN_BAL  FROM  GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D, GPIL_FARMER_MASTER FM, GPIL_FARMER_CROP_HISTORY F,GPIL_ORGN_MASTER O,GPIL_CROP_MASTER C,GPIL_VARIETY_MASTER V,GPIL_FARMER_FREIGHT_CHARGE_MASTER FF,GPIL_USER_MASTER U,GPIL_FARMER_PURCHASE_TRANSACTIONS FLT WHERE H.HEADER_ID=D.HEADER_ID AND F.FARM_CODE=FM.FARM_CODE AND D.HEADER_ID='" + PurchaseNO + "' AND (F.BANK_ACCOUNT_NO IS NOT NULL AND F.BANK_ACCOUNT_NO <>'') AND FLT.PURCH_REF=D.HEADER_ID AND FLT.FARM_CODE=D.FARMER_CODE AND FLT.ORGN_CODE=H.ORGN_CODE AND REJE_STATUS='OK' AND U.USER_ID=H.BUYER_CODE AND FF.VILLAGE_CODE=FM.VILLAGE_CODE AND FF.ORGN_CODE=H.ORGN_CODE AND C.CROP=H.CROP AND V.VARIETY=H.VARIETY AND F.CROP=H.CROP AND F.VARIETY=H.VARIETY AND FF.CROP=H.CROP AND FF.VARIETY=H.VARIETY AND FLT.CROP=H.CROP AND FLT.VARIETY=H.VARIETY AND O.ORGN_CODE=H.ORGN_CODE AND  F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,FM.FARM_FATHER_NAME,FM.FARM_NAME,F.BANK_ACCOUNT_NO,F.BANK_NAME,F.BRANCH_NAME,F.IFSC_CODE,FF.FREIGHT_CHARGE,FLT.LOAN_AMOUNT,FLT.BALANCE_AMOUNT";
            }
            else if (ReportType == "Non-Accountable_Farmer")
            {
                query = "SELECT ROW_NUMBER() OVER(ORDER BY FARMER_CODE) AS SNO, FARMER_CODE,FM.FARM_NAME,FM.FARM_FATHER_NAME AS FATHER_NAME,(F.BANK_NAME + ',' + CHAR(13) + CHAR(10) + F.BRANCH_NAME) AS BANK_DETAILS,F.BANK_ACCOUNT_NO,F.IFSC_CODE,COUNT(GPIL_BALE_NUMBER) AS BALE_COUNT,ROUND(ISNULL(SUM(NET_WT),0),2) AS QUANTITY,ROUND(ISNULL(SUM(NET_WT * RATE),0)/ISNULL(SUM(NET_WT),0),6) AS AVE_PRICE,FF.FREIGHT_CHARGE AS FREIGHT_CHARGE,ROUND(ISNULL(SUM(NET_WT * RATE),0),2) AS TOTAL_VALUE,(CASE WHEN FLT.LOAN_AMOUNT <= ROUND(ISNULL(SUM(NET_WT * RATE),0),2) THEN FLT.LOAN_AMOUNT ELSE ROUND(ISNULL(SUM(NET_WT * RATE),0),2) END) AS LOAN_AMOUNT,(CASE WHEN (ROUND(ISNULL(SUM(NET_WT * RATE),0),2)-FLT.LOAN_AMOUNT) > 0 THEN (ROUND(ISNULL(SUM(NET_WT * RATE),0),2)-FLT.LOAN_AMOUNT) ELSE '0' END) AS LOAN_BAL  FROM  GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D, GPIL_FARMER_MASTER FM, GPIL_FARMER_CROP_HISTORY F,GPIL_ORGN_MASTER O,GPIL_CROP_MASTER C,GPIL_VARIETY_MASTER V,GPIL_FARMER_FREIGHT_CHARGE_MASTER FF,GPIL_USER_MASTER U,GPIL_FARMER_PURCHASE_TRANSACTIONS FLT WHERE H.HEADER_ID=D.HEADER_ID AND F.FARM_CODE=FM.FARM_CODE AND D.HEADER_ID='" + PurchaseNO + "' AND (F.BANK_ACCOUNT_NO IS NULL OR F.BANK_ACCOUNT_NO ='') AND FLT.PURCH_REF=D.HEADER_ID AND FLT.FARM_CODE=D.FARMER_CODE AND FLT.ORGN_CODE=H.ORGN_CODE AND REJE_STATUS='OK' AND U.USER_ID=H.BUYER_CODE AND FF.VILLAGE_CODE=FM.VILLAGE_CODE AND FF.ORGN_CODE=H.ORGN_CODE AND C.CROP=H.CROP AND V.VARIETY=H.VARIETY AND F.CROP=H.CROP AND F.VARIETY=H.VARIETY AND FF.CROP=H.CROP AND FF.VARIETY=H.VARIETY AND FLT.CROP=H.CROP AND FLT.VARIETY=H.VARIETY AND O.ORGN_CODE=H.ORGN_CODE AND  F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,FM.FARM_FATHER_NAME,FM.FARM_NAME,F.BANK_ACCOUNT_NO,F.BANK_NAME,F.BRANCH_NAME,F.IFSC_CODE,FF.FREIGHT_CHARGE,FLT.LOAN_AMOUNT,FLT.BALANCE_AMOUNT";
            }
            else if (ReportType == "All_Farmer")
            {
                query = "SELECT ROW_NUMBER() OVER(ORDER BY FARMER_CODE) AS SNO, FARMER_CODE,FM.FARM_NAME,FM.FARM_FATHER_NAME AS FATHER_NAME,(F.BANK_NAME + ',' + CHAR(13) + CHAR(10) + F.BRANCH_NAME) AS BANK_DETAILS,F.BANK_ACCOUNT_NO,F.IFSC_CODE,COUNT(GPIL_BALE_NUMBER) AS BALE_COUNT,ROUND(ISNULL(SUM(NET_WT),0),2) AS QUANTITY,ROUND(ISNULL(SUM(NET_WT * RATE),0)/ISNULL(SUM(NET_WT),0),6) AS AVE_PRICE,FF.FREIGHT_CHARGE AS FREIGHT_CHARGE,ROUND(ISNULL(SUM(NET_WT * RATE),0),2) AS TOTAL_VALUE,(CASE WHEN FLT.LOAN_AMOUNT <= ROUND(ISNULL(SUM(NET_WT * RATE),0),2) THEN FLT.LOAN_AMOUNT ELSE ROUND(ISNULL(SUM(NET_WT * RATE),0),2) END) AS LOAN_AMOUNT,(CASE WHEN (ROUND(ISNULL(SUM(NET_WT * RATE),0),2)-FLT.LOAN_AMOUNT) > 0 THEN (ROUND(ISNULL(SUM(NET_WT * RATE),0),2)-FLT.LOAN_AMOUNT) ELSE '0' END) AS LOAN_BAL  FROM  GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D, GPIL_FARMER_MASTER FM, GPIL_FARMER_CROP_HISTORY F,GPIL_ORGN_MASTER O,GPIL_CROP_MASTER C,GPIL_VARIETY_MASTER V,GPIL_FARMER_FREIGHT_CHARGE_MASTER FF,GPIL_USER_MASTER U,GPIL_FARMER_PURCHASE_TRANSACTIONS FLT WHERE H.HEADER_ID=D.HEADER_ID AND F.FARM_CODE=FM.FARM_CODE AND D.HEADER_ID='" + PurchaseNO + "' AND  FLT.PURCH_REF=D.HEADER_ID AND FLT.FARM_CODE=D.FARMER_CODE AND FLT.ORGN_CODE=H.ORGN_CODE AND REJE_STATUS='OK' AND U.USER_ID=H.BUYER_CODE AND FF.VILLAGE_CODE=FM.VILLAGE_CODE AND FF.ORGN_CODE=H.ORGN_CODE AND C.CROP=H.CROP AND V.VARIETY=H.VARIETY AND F.CROP=H.CROP AND F.VARIETY=H.VARIETY AND FF.CROP=H.CROP AND FF.VARIETY=H.VARIETY AND FLT.CROP=H.CROP AND FLT.VARIETY=H.VARIETY AND O.ORGN_CODE=H.ORGN_CODE AND  F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,FM.FARM_FATHER_NAME,FM.FARM_NAME,F.BANK_ACCOUNT_NO,F.BANK_NAME,F.BRANCH_NAME,F.IFSC_CODE,FF.FREIGHT_CHARGE,FLT.LOAN_AMOUNT,FLT.BALANCE_AMOUNT";
            }




            ds1 = lddMgt.GetQueryResult(query);

            string json = JsonConvert.SerializeObject(ds1);
            return Json(json, JsonRequestBehavior.AllowGet);
            //return Json(new { result = "Redirect", url = Url.Action("FarmerPurchasePendingBalesIndex", "LDD") });

        }




        /// <summary>
        /// Farmer Loan Status Report
        /// </summary>
        /// <returns></returns>
        public ActionResult FarmerLoanStatusIndex()
        {
            ViewBag.GPIL_CROP_MASTER = (from c in _context.GPIL_CROP_MASTER where c.STATUS == "Y" select new { CROP1 = c.CROP + " - " + c.CROP_YEAR, c.CROP }).ToList();
            ViewBag.GPIL_VARIETY_MASTER = (from v in _context.GPIL_VARIETY_MASTER where v.STATUS == "Y" select new { VARIETY1 = v.VARIETY + " - " + v.VARIETY_NAME, v.VARIETY }).ToList();
            return View();
        }


        [HttpGet]
        public ActionResult FarmerLoanStatusDetails(string strCrop, string StrVariety)
        {
            LDDManagement lddMgt = new LDDManagement();
            DataTable dtclstr = new DataTable();

            string query = "";

            query = "SELECT ROW_NUMBER() OVER(ORDER BY TBL.FARM_CODE) AS SNO,FARM_CODE,FARM_NAME,VILLAGE_NAME,CAST(TOTAL_LOAN_AMOUNT AS DECIMAL(10,2)) AS TOTAL_LOAN_AMOUNT ,CAST( RECOVER_LOAN AS DECIMAL(10,2)) AS RECOVER_LOAN,CAST( BALANCE_LOAN AS DECIMAL(10,2)) AS BALANCE_LOAN,CAST(PURCHASE_AMOUNT AS DECIMAL(10,2)) AS PURCHASE_AMOUNT,LASTE_PURCHASE_DATE FROM (SELECT TBL1.FARM_CODE,TBL1.FARM_NAME,TBL1.VILLAGE_NAME,ROUND(ISNULL(TBL2.LOAN,0),2) AS TOTAL_LOAN_AMOUNT,ROUND(ISNULL(TBL3.LOAN_DEDUCTED,0),2) AS RECOVER_LOAN,(ROUND(ISNULL(TBL2.LOAN,0),2) - ROUND(ISNULL(TBL3.LOAN_DEDUCTED,0),2)) AS BALANCE_LOAN,ROUND(ISNULL(TBL3.PURCHASE,0),2) AS PURCHASE_AMOUNT,ROUND(ISNULL(TBL4.DEBIT,0),2) AS DEBIT,TBL3.CREATED_DATE AS LASTE_PURCHASE_DATE FROM (SELECT H.FARM_CODE,F.FARM_NAME,V.VILLAGE_NAME FROM GPIL_FARMER_CROP_HISTORY H,GPIL_FARMER_MASTER F,GPIL_VILLAGE_MASTER V WHERE F.FARM_CODE=H.FARM_CODE AND F.VILLAGE_CODE=V.VILLAGE_CODE AND H.CROP='" + strCrop + "' AND H.VARIETY='" + StrVariety + "' AND H.LOAN_AMOUNT<>'0') AS TBL1 LEFT OUTER JOIN (SELECT D.FARM_CODE,SUM(D.CREDIT_AMOUNT) AS LOAN  FROM GPIL_FARMER_CROP_HISTORY H,GPIL_FARMER_LOAN_TRANSACTIONS D WHERE D.CROP='" + strCrop + "' AND D.VARIETY='" + StrVariety + "' AND H.LOAN_AMOUNT<>'0' AND H.CROP=D.CROP AND H.VARIETY=D.VARIETY AND H.FARM_CODE=D.FARM_CODE GROUP BY D.FARM_CODE) AS TBL2 ON TBL2.FARM_CODE=TBL1.FARM_CODE LEFT OUTER JOIN (SELECT D.FARM_CODE,SUM(CASE WHEN D.LOAN_AMOUNT>D.PURCH_AMOUNT THEN D.PURCH_AMOUNT ELSE D.LOAN_AMOUNT END) AS LOAN_DEDUCTED,SUM(D.PURCH_AMOUNT) AS PURCHASE,MAX(D.CREATED_DATE) AS CREATED_DATE FROM GPIL_FARMER_CROP_HISTORY H,GPIL_FARMER_PURCHASE_TRANSACTIONS D WHERE D.CROP='" + strCrop + "' AND D.VARIETY='" + StrVariety + "' AND H.LOAN_AMOUNT<>'0' AND H.CROP=D.CROP AND H.VARIETY=D.VARIETY AND H.FARM_CODE=D.FARM_CODE GROUP BY D.FARM_CODE) AS TBL3 ON TBL3.FARM_CODE=TBL1.FARM_CODE LEFT OUTER JOIN (SELECT D.FARM_CODE,ISNULL(SUM(D.DEBIT_AMOUNT),0) AS DEBIT  FROM GPIL_FARMER_CROP_HISTORY H,GPIL_FARMER_LOAN_TRANSACTIONS D WHERE D.CROP='" + strCrop + "' AND D.VARIETY='" + StrVariety + "' AND H.LOAN_AMOUNT<>'0' AND H.CROP=D.CROP AND H.VARIETY=D.VARIETY AND H.FARM_CODE=D.FARM_CODE GROUP BY D.FARM_CODE) AS TBL4 ON TBL4.FARM_CODE=TBL1.FARM_CODE ) AS TBL";




            dtclstr = lddMgt.GetQueryResult(query);
            string json = JsonConvert.SerializeObject(dtclstr);
            var jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;


        }





        /// <summary>
        /// FARMER PURCHASE CR-RR BALES DETAILS
        /// </summary>
        /// <returns></returns>
        public ActionResult FPCRRRBalesDetailsIndex()
        {
            ViewBag.GPIL_CROP_MASTER = (from c in _context.GPIL_CROP_MASTER where c.STATUS == "Y" select new { CROP1 = c.CROP + " - " + c.CROP_YEAR, c.CROP }).ToList();
            ViewBag.GPIL_VARIETY_MASTER = (from v in _context.GPIL_VARIETY_MASTER where v.STATUS == "Y" select new { VARIETY1 = v.VARIETY + " - " + v.VARIETY_NAME, v.VARIETY }).ToList();
            return View();
        }

        [HttpGet]

        public JsonResult FarmerPurchaseCRRRBalesDetails(string FromDate, string ToDate, string Crop, string Variety)
        {
            LDDManagement lddMgt = new LDDManagement();
            DataTable dtclstr = new DataTable();

            string query = "";
            string strConfition = " ";

            if (FromDate.Trim().Length != 0 && ToDate.Trim().Length != 0)
            {
                strConfition = " AND H.DATE_OF_PURCH BETWEEN CONVERT(varchar,'" + FromDate + " 00:00:00',105) AND  CONVERT(varchar,'" + ToDate + " 23:59:59',105)";

            }


            query = "SELECT ROW_NUMBER() OVER(ORDER BY TBL1.HEADER_ID,FARMER_CODE,GPIL_BALE_NUMBER) AS SNO,ORGN_CODE,TBL1.HEADER_ID,ISNULL(TOTAL_OFFERED_BALES,0) AS TOTAL_OFFERED_BALES,ISNULL(TOTAL_REJ_BALES,0) AS TOTAL_REJ_BALES,FARMER_CODE,FARM_NAME,VILLAGE_CODE,VILLAGE_NAME,GPIL_BALE_NUMBER,REMARKS,REJE_TYPE,CREATED_DATE,LOT_NO FROM " +
                    "(SELECT H.ORGN_CODE AS ORGN_CODE,FARMER_CODE,FARM_NAME,V.VILLAGE_CODE,V.VILLAGE_NAME,GPIL_BALE_NUMBER,ISNULL(REMARKS,'') AS REMARKS,REJE_TYPE,D.CREATED_DATE, 'Lot : ' + TB_LOT_NO  + ' - ' + D.ATTRIBUTE3 AS LOT_NO,H.HEADER_ID FROM GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_FARMER_MASTER F,GPIL_VILLAGE_MASTER V  WHERE V.VILLAGE_CODE=F.VILLAGE_CODE AND REJE_STATUS='RJ' AND  FARM_CODE=FARMER_CODE AND H.HEADER_ID=D.HEADER_ID AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' " + strConfition + ") AS TBL1 LEFT OUTER JOIN " +
                    "(SELECT H.HEADER_ID ,COUNT(GPIL_BALE_NUMBER) AS TOTAL_OFFERED_BALES FROM GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D  WHERE H.HEADER_ID=D.HEADER_ID AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' " + strConfition + " GROUP BY  H.HEADER_ID) AS TBL2 ON TBL1.HEADER_ID=TBL2.HEADER_ID LEFT OUTER JOIN " +
                    "(SELECT H.HEADER_ID ,COUNT(GPIL_BALE_NUMBER) AS TOTAL_REJ_BALES FROM GPIL_TAP_FARM_PURCHS_HDR H,GPIL_TAP_FARM_PURCHS_DTLS D  WHERE REJE_STATUS='RJ' AND  H.HEADER_ID=D.HEADER_ID AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' " + strConfition + " GROUP BY  H.HEADER_ID) AS TBL3 ON TBL1.HEADER_ID=TBL3.HEADER_ID ";


            dtclstr = lddMgt.GetQueryResult(query);
            string json = JsonConvert.SerializeObject(dtclstr);
            var jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;

        }


        /// <summary>
        /// Todat-ToDate CR-RR Details
        /// </summary>
        /// <returns></returns>
        public ActionResult TTDCRRRDetailsIndex()
        {
            //ViewBag.GPIL_ORGN_MASTER = (from s in _context.GPIL_ORGN_MASTER where s.STATUS == "Y" select new { ORGN_CODE1 = s.ORGN_CODE + " - " + s.ORGN_NAME, s.ORGN_CODE }).ToList();
            ViewBag.GPIL_CROP_MASTER = (from c in _context.GPIL_CROP_MASTER where c.STATUS == "Y" select new { CROP1 = c.CROP + " - " + c.CROP_YEAR, c.CROP }).ToList();
            ViewBag.GPIL_VARIETY_MASTER = (from v in _context.GPIL_VARIETY_MASTER where v.STATUS == "Y" select new { VARIETY1 = v.VARIETY + " - " + v.VARIETY_NAME, v.VARIETY }).ToList();
            return View();

        }

        [HttpGet]
        public JsonResult TTDCRRRDetails(string Fromdate, string Crop, string Variety)
        {
            string json = "";

            string lblMessage = string.Empty;
            LDDManagement lddMgt = new LDDManagement();
            DataTable dtclstr = new DataTable();
            if (Fromdate != "" && Crop != "" && Variety != "")
            {
                string query = "";
                //query = "SELECT ROW_NUMBER() OVER(ORDER BY TBL1.ORGN_CODE) AS SNO,TBL1.ORGN_CODE,ISNULL(TBL2.TODAY_OFFERED,0) AS TODAY_OFFERED,ISNULL(TBL1.TODATE_OFFERED,0) AS TODATE_OFFERED,ISNULL(TBL3.TODAY_CR,0) AS TODAY_CR,ISNULL(TBL4.TODATE_CR,0) AS TODATE_CR,ISNULL(TBL5.TODAY_RR,0) AS TODAY_RR,ISNULL(TBL6.TODATE_RR,0) AS TODATE_RR,ISNULL(TBL7.TODAY_SOLD,0) AS TODAY_SOLD,ISNULL(TBL8.TODATE_SOLD,0) AS TODATE_SOLD FROM (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODATE_OFFERED FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.DATE_OF_PURCH < CONVERT(DATETIME,'" + Fromdate + " 23:59:59',105) AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' GROUP BY H.ORGN_CODE) AS TBL1 FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODAY_OFFERED FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.HEADER_ID LIKE '%" + DateTime.ParseExact(Fromdate, "dd-MM-yyyy", null).ToString("yyyyMMdd") + "' AND H.DATE_OF_PURCH < CONVERT(DATETIME,'" + Fromdate + " 23:59:59',105) AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' GROUP BY H.ORGN_CODE ) AS TBL2 ON TBL2.ORGN_CODE=TBL1.ORGN_CODE FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODAY_CR FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.HEADER_ID LIKE '%" + DateTime.ParseExact(Fromdate, "dd-MM-yyyy", null).ToString("yyyyMMdd") + "' AND H.DATE_OF_PURCH < CONVERT(DATETIME,'" + Fromdate + " 23:59:59',105) AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' AND D.REJE_STATUS='RJ' AND REJE_TYPE='CR' GROUP BY H.ORGN_CODE ) AS TBL3 ON TBL3.ORGN_CODE=TBL1.ORGN_CODE FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODATE_CR FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.DATE_OF_PURCH < CONVERT(DATETIME,'" + Fromdate + " 23:59:59',105) AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' AND D.REJE_STATUS='RJ' AND REJE_TYPE='CR' GROUP BY H.ORGN_CODE ) AS TBL4 ON TBL4.ORGN_CODE=TBL1.ORGN_CODE FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODAY_RR FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.HEADER_ID LIKE '%" + DateTime.ParseExact(Fromdate, "dd-MM-yyyy", null).ToString("yyyyMMdd") + "' AND H.DATE_OF_PURCH < CONVERT(DATETIME,'" + Fromdate + " 23:59:59',105) AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' AND D.REJE_STATUS='RJ' AND REJE_TYPE='RR' GROUP BY H.ORGN_CODE ) AS TBL5 ON TBL5.ORGN_CODE=TBL1.ORGN_CODE FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODATE_RR FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.DATE_OF_PURCH < CONVERT(DATETIME,'" + Fromdate + " 23:59:59',105) AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' AND D.REJE_STATUS='RJ' AND REJE_TYPE='RR' GROUP BY H.ORGN_CODE ) AS TBL6 ON TBL6.ORGN_CODE=TBL1.ORGN_CODE FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODAY_SOLD FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.HEADER_ID LIKE '%" + DateTime.ParseExact(Fromdate, "dd-MM-yyyy", null).ToString("yyyyMMdd") + "' AND H.DATE_OF_PURCH < CONVERT(DATETIME,'" + Fromdate + " 23:59:59',105) AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' AND D.REJE_STATUS='OK' GROUP BY H.ORGN_CODE ) AS TBL7 ON TBL7.ORGN_CODE=TBL1.ORGN_CODE FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODATE_SOLD FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.DATE_OF_PURCH < CONVERT(DATETIME,'" + Fromdate + " 23:59:59',105) AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' AND D.REJE_STATUS='OK' GROUP BY H.ORGN_CODE ) AS TBL8 ON TBL8.ORGN_CODE=TBL1.ORGN_CODE ORDER BY  TBL1.ORGN_CODE";

                query = "SELECT ROW_NUMBER() OVER(ORDER BY TBL1.ORGN_CODE) AS SNO,TBL1.ORGN_CODE,ISNULL(TBL2.TODAY_OFFERED,0) AS TODAY_OFFERED,ISNULL(TBL1.TODATE_OFFERED,0) AS TODATE_OFFERED,ISNULL(TBL3.TODAY_CR,0) AS TODAY_CR,ISNULL(TBL4.TODATE_CR,0) AS TODATE_CR,ISNULL(TBL5.TODAY_RR,0) AS TODAY_RR,ISNULL(TBL6.TODATE_RR,0) AS TODATE_RR,ISNULL(TBL7.TODAY_SOLD,0) AS TODAY_SOLD,ISNULL(TBL8.TODATE_SOLD,0) AS TODATE_SOLD FROM (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODATE_OFFERED FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.DATE_OF_PURCH < CONVERT(VARCHAR,'" + Fromdate + " 23:59:59',105) AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' GROUP BY H.ORGN_CODE) AS TBL1 FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODAY_OFFERED FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.HEADER_ID LIKE '%" + DateTime.ParseExact(Fromdate, "yyyy-MM-dd", null).ToString("yyyyMMdd") + "' AND H.DATE_OF_PURCH < CONVERT(VARCHAR,'" + Fromdate + " 23:59:59',105) AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' GROUP BY H.ORGN_CODE ) AS TBL2 ON TBL2.ORGN_CODE=TBL1.ORGN_CODE FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODAY_CR FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.HEADER_ID LIKE '%" + DateTime.ParseExact(Fromdate, "yyyy-MM-dd", null).ToString("yyyyMMdd") + "' AND H.DATE_OF_PURCH < CONVERT(VARCHAR,'" + Fromdate + " 23:59:59',105) AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' AND D.REJE_STATUS='RJ' AND REJE_TYPE='CR' GROUP BY H.ORGN_CODE ) AS TBL3 ON TBL3.ORGN_CODE=TBL1.ORGN_CODE FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODATE_CR FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.DATE_OF_PURCH < CONVERT(VARCHAR,'" + Fromdate + " 23:59:59',105) AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' AND D.REJE_STATUS='RJ' AND REJE_TYPE='CR' GROUP BY H.ORGN_CODE ) AS TBL4 ON TBL4.ORGN_CODE=TBL1.ORGN_CODE FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODAY_RR FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.HEADER_ID LIKE '%" + DateTime.ParseExact(Fromdate, "yyyy-MM-dd", null).ToString("yyyyMMdd") + "' AND H.DATE_OF_PURCH < CONVERT(VARCHAR,'" + Fromdate + " 23:59:59',105) AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' AND D.REJE_STATUS='RJ' AND REJE_TYPE='RR' GROUP BY H.ORGN_CODE ) AS TBL5 ON TBL5.ORGN_CODE=TBL1.ORGN_CODE FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODATE_RR FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.DATE_OF_PURCH < CONVERT(VARCHAR,'" + Fromdate + " 23:59:59',105) AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' AND D.REJE_STATUS='RJ' AND REJE_TYPE='RR' GROUP BY H.ORGN_CODE ) AS TBL6 ON TBL6.ORGN_CODE=TBL1.ORGN_CODE FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODAY_SOLD FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.HEADER_ID LIKE '%" + DateTime.ParseExact(Fromdate, "yyyy-MM-dd", null).ToString("yyyyMMdd") + "' AND H.DATE_OF_PURCH < CONVERT(VARCHAR,'" + Fromdate + " 23:59:59',105) AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' AND D.REJE_STATUS='OK' GROUP BY H.ORGN_CODE ) AS TBL7 ON TBL7.ORGN_CODE=TBL1.ORGN_CODE FULL OUTER JOIN (SELECT H.ORGN_CODE,COUNT(D.GPIL_BALE_NUMBER) AS TODATE_SOLD FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H WHERE H.HEADER_ID=D.HEADER_ID AND H.PURCHASE_TYPE='SUNDRY PURCHASE' AND H.DATE_OF_PURCH < CONVERT(VARCHAR,'" + Fromdate + " 23:59:59',105) AND H.CROP='" + Crop + "' AND H.VARIETY='" + Variety + "' AND D.REJE_STATUS='OK' GROUP BY H.ORGN_CODE ) AS TBL8 ON TBL8.ORGN_CODE=TBL1.ORGN_CODE ORDER BY  TBL1.ORGN_CODE";

                dtclstr = lddMgt.GetQueryResult(query);
                json = JsonConvert.SerializeObject(dtclstr);
                return Json(json, JsonRequestBehavior.AllowGet);
            }
            else
            {
                data = "Error: Please Select All Fields";
                json = JsonConvert.SerializeObject(data);
                jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
                //lblMessage = "Error: Please Select All Fields";

            }


        }


        /// <summary>
        /// FarmerWise Purchase Summary
        /// </summary>
        /// <returns></returns>
        public ActionResult FarmerwisePurchaseSummaryIndex()
        {
            ViewBag.GPIL_CROP_MASTER = (from c in _context.GPIL_CROP_MASTER where c.STATUS == "Y" select new { CROP1 = c.CROP + " - " + c.CROP_YEAR, c.CROP }).ToList();
            ViewBag.GPIL_VARIETY_MASTER = (from v in _context.GPIL_VARIETY_MASTER where v.STATUS == "Y" select new { VARIETY1 = v.VARIETY + " - " + v.VARIETY_NAME, v.VARIETY }).ToList();
            return View();
        }



        [HttpGet]
        public ActionResult FarmerWisePurchaseSummaryDetails(string strCrop, string StrVariety)
        {
            try
            {
                string json = "";
                LDDManagement lddMgt = new LDDManagement();
                DataTable dtclstr = new DataTable();

                if (strCrop != "" && StrVariety != "")
                {
                    string query = "";

                    query = "SELECT ROW_NUMBER() OVER(ORDER BY FARMER_CODE) AS SNO,FARMER_CODE,F.FARM_NAME,F.FARM_FATHER_NAME AS FATHER_NAME,FARM_ADDRESS1 AS VILLAGE,F.BANK_NAME AS BANK_NAME,'AC NO :'+ F.BANK_ACCOUNT_NO AS AccNo ,F.BRANCH_NAME ,F.IFSC_CODE , COUNT(GPIL_BALE_NUMBER) AS BALES,ROUND(SUM(NET_WT),1) AS QUANTITY ,ROUND(SUM(NET_WT*RATE),2) AS TOTAL_VALUE FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H,GPIL_FARMER_MASTER F WHERE H.HEADER_ID=D.HEADER_ID AND H.CROP='" + strCrop + "' AND H.VARIETY='" + StrVariety + "' AND H.STATUS IN ('P','N') AND D.REJE_STATUS='OK' AND H.PURCHASE_TYPE = 'SUNDRY PURCHASE' AND F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,F.FARM_NAME,F.FARM_FATHER_NAME,FARM_ADDRESS1,F.BANK_NAME, F.BANK_ACCOUNT_NO  ,F.BRANCH_NAME ,F.IFSC_CODE union all select ROW_NUMBER() OVER(ORDER BY F.FARM_CODE) AS SNO,f.FARM_CODE,F.FARM_NAME,F.FARM_FATHER_NAME AS FATHER_NAME,FARM_ADDRESS1 AS VILLAGE,F.BANK_NAME AS BANK_NAME,'AC NO :'+ F.BANK_ACCOUNT_NO AS AccNo ,F.BRANCH_NAME ,F.IFSC_CODE ,'0' AS BALES,'0' AS QUANTITY ,'0' AS TOTAL_VALUE from  GPIL_FARMER_CROP_HISTORY H,GPIL_FARMER_MASTER F where f.FARM_CODE = H.FARM_CODE and CROP='" + strCrop + "' AND VARIETY='" + StrVariety + "' and H.FARM_CODE not in(SELECT FARMER_CODE FROM GPIL_TAP_FARM_PURCHS_DTLS D,GPIL_TAP_FARM_PURCHS_HDR H,GPIL_FARMER_MASTER F WHERE H.HEADER_ID=D.HEADER_ID AND H.CROP='" + strCrop + "' AND H.VARIETY='" + StrVariety + "' AND H.STATUS IN ('P','N') AND D.REJE_STATUS='OK' AND H.PURCHASE_TYPE = 'SUNDRY PURCHASE' AND F.FARM_CODE=D.FARMER_CODE GROUP BY FARMER_CODE,F.FARM_NAME,F.FARM_FATHER_NAME,FARM_ADDRESS1,F.BANK_NAME, F.BANK_ACCOUNT_NO  ,F.BRANCH_NAME ,F.IFSC_CODE)";

                    dtclstr = lddMgt.GetQueryResult(query);
                    json = JsonConvert.SerializeObject(dtclstr);
                    var jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else
                {
                    data = "Error: Please Select All Fields";
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }



            }
            catch (Exception ex)
            {

            }

            return View();

        }


        /// <summary>
        /// FarmerAuthorized Quantity Report
        /// </summary>
        /// <returns></returns>

        public ActionResult FarmerAuthorizedQuantityIndex()
        {
            ViewBag.GPIL_CROP_MASTER = (from c in _context.GPIL_CROP_MASTER where c.STATUS == "Y" select new { CROP1 = c.CROP + " - " + c.CROP_YEAR, c.CROP }).ToList();
            ViewBag.GPIL_VARIETY_MASTER = (from v in _context.GPIL_VARIETY_MASTER where v.STATUS == "Y" select new { VARIETY1 = v.VARIETY + " - " + v.VARIETY_NAME, v.VARIETY }).ToList();
            return View();
        }


        [HttpGet]
        public JsonResult FarmerAuthorizedQtyDetails(string FromDate, string ToDate, string Crop, string Variety)
        {
            DataSet ds = new DataSet();
            LDManagement ldMgt = new LDManagement();
            string json = "";

            try
            {
                if (FromDate == string.Empty)
                {
                    data = "Error: Please Select From Date";
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }

                else if (ToDate == string.Empty)
                {
                    data = "Error: Please Select To Date";
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else if (Crop == string.Empty)
                {
                    data = "Error: Please Select Crop";
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }

                else if (Variety == string.Empty)
                {
                    data = "Error: Please Select Variety";
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }


                ds = ldMgt.GetFarmerAuthorizedQty(FromDate, ToDate, Crop, Variety);
                //var data = ds;
                json = JsonConvert.SerializeObject(ds.Tables[0]);
                jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;

            }
            catch (Exception ex)
            {
                data = ex.ToString();
                json = JsonConvert.SerializeObject(data);
                jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return Json(ds);
        }


        public ActionResult FarmerPurchaseSlipTempIndex()

        {
            ViewBag.GPIL_ORGN_MASTER = (from s in _context.GPIL_ORGN_MASTER where s.STATUS == "Y" select new { ORGN_CODE1 = s.ORGN_CODE + " - " + s.ORGN_NAME, s.ORGN_CODE }).ToList();
            return View();
        }






        [HttpGet]
        // GET: Get Farmercode Based on Organization Code
        public ActionResult FarmerCode(string orgnCode)
        {
            DataSet ds = new DataSet();
            DataTable ds1 = new DataTable();
            string strsql;
            string json = "";
            VerificationManagement ldMgt = new VerificationManagement();
            try
            {

                strsql = "select DISTINCT (TB_LOT_NO + ' - ' + FARMER_CODE) as FARMER_LOT,FARMER_CODE,CONVERT(INT,TB_LOT_NO) From GPIL_TAP_FARM_PURCHS_DTLS (NOLOCK) where HEADER_ID = '" + orgnCode + "' ORDER BY CONVERT(INT,TB_LOT_NO)";
                ds1 = ldMgt.GetQueryResult(strsql);
                ds1.TableName = "Table";
                var data = ds1;
                json = JsonConvert.SerializeObject(data);

                var jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            catch (Exception ex)
            { }

            return Json(ds);
        }



        [HttpGet]
        // GET: Get Bales and Lot Count Based on Organization Code
        public ActionResult TotalCount(string orgnCode)
        {
            DataSet ds = new DataSet();
            DataTable ds1 = new DataTable();
            string strsql;
            string json = "";
            VerificationManagement ldMgt = new VerificationManagement();
            try
            {

                strsql = "select ISNULL(MAX(CONVERT(INT,TB_LOT_NO)),'0') as LOT_NO,COUNT(GPIL_BALE_NUMBER) as BALES From GPIL_TAP_FARM_PURCHS_DTLS (NOLOCK) where HEADER_ID = '" + orgnCode + "'";
                ds1 = ldMgt.GetQueryResult(strsql);
                ds1.TableName = "Table";
                var data = ds1;
                json = JsonConvert.SerializeObject(data);

                var jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            catch (Exception ex)
            { }

            return Json(ds);
        }






        /// <summary>
        /// ITEM MASTER
        /// </summary>
        /// <returns></returns>
        public ActionResult ItemMasterIndex()
        {
            ViewBag.GPIL_CROP_MASTER = (from c in _context.GPIL_CROP_MASTER where c.STATUS == "Y" select new { CROP1 = c.CROP + " - " + c.CROP_YEAR, c.CROP }).ToList();
            return View();
        }

        DataTable dt = new DataTable();
        CommonManagement cMgt = new CommonManagement();

        string lblMessage = string.Empty;
        string data = String.Empty;
        JsonResult jsonResult;

        //Crop, Item, ItemCode, Uom
        [HttpPost]
        public ActionResult InsertItemMaster(string crop, string item, string itemCode, string uom)
        {
            string lblMessage = string.Empty;
            string data = String.Empty, json = String.Empty;
            JsonResult jsonResult;
            try
            {

                int i = 0;
                string query;


                if (crop != "" && item != "" && itemCode != "" && uom != "")
                {

                    if (item.Length <= 3)
                    {
                        data = "Error:Item Length should be 4!";
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else if (itemCode.Length <= 3)
                    {
                        data = "Error:ItemCode Length should be 4!";
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else if (uom.Length <= 1)
                    {
                        data = "Error:Uom Length should be 2!";
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    query = "select * from [dbo].[GPIL_Leaf_Item_Master] where [Crop] =  '" + crop + "'and [itemcode]= '" + itemCode + "' ";
                    dt = cMgt.GetQueryResult(query);

                    if (dt.Rows.Count == 0)
                    {
                        string queryIns = "INSERT INTO [dbo].[GPIL_Leaf_Item_Master]([Crop],[ItemCode],[UOM],[ItemName]) VALUES";
                        queryIns += "('" + crop + "','" + itemCode + "','" + uom + "','" + item + "')";

                        bool b = cMgt.UpdateUsingExecuteNonQuery(queryIns);

                        if (b)
                        {
                            data = "Success:Data Updated Sucessfully!!";
                            json = JsonConvert.SerializeObject(data);
                            jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                            jsonResult.MaxJsonLength = int.MaxValue;
                            return jsonResult;
                        }
                        else
                        {
                            data = "Error: Error While Inserting Data!!";
                            json = JsonConvert.SerializeObject(data);
                            jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                            jsonResult.MaxJsonLength = int.MaxValue;
                            return jsonResult;
                        }

                        //lblMessage = "Success: Updated!! Sucessfully!!";
                        //lblMessage.Visible = true;
                    }
                    else
                    {
                        data = "Error: The values already exists";
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                        //lblMessage = "Error: The values already exists";
                        //lblMessage.Visible = true;
                    }
                }
                else
                {
                    data = "Error: Please check all the values are entered...";
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }




            }
            catch (Exception ex)
            {
                data = "Error: " + ex.Message;
                json = JsonConvert.SerializeObject(data);
                jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
                //lblMessage.Visible = true;
                //lblMessage = ex.ToString();
            }
            return View();


        }




        public ActionResult ItemMasterExcelIndex()
        {

            return View();
        }


        [HttpPost]
        public ActionResult ImportFromExcel(HttpPostedFileBase postedFile)
        {
            if (ModelState.IsValid)
            {
                if (postedFile != null && postedFile.ContentLength > (1024 * 1024 * 50))  // 50MB limit  
                {
                    ModelState.AddModelError("postedFile", "Your file is to large. Maximum size allowed is 50MB !");
                }

                else
                {
                    string filePath = string.Empty;
                    string path = Server.MapPath("~/ExcelUploads/");
                    if (!Directory.Exists(path))
                    {
                        Directory.CreateDirectory(path);
                    }

                    filePath = path + Path.GetFileName(postedFile.FileName);
                    string extension = Path.GetExtension(postedFile.FileName);
                    postedFile.SaveAs(filePath);

                    string conString = string.Empty;
                    switch (extension)
                    {
                        case ".xls": //For Excel 97-03.  
                            conString = ConfigurationManager.ConnectionStrings["Excel03ConString"].ConnectionString;
                            break;
                        case ".xlsx": //For Excel 07 and above.  
                            conString = ConfigurationManager.ConnectionStrings["Excel07ConString"].ConnectionString;
                            break;
                    }

                    try
                    {
                        DataTable dt = new DataTable();
                        conString = string.Format(conString, filePath);

                        using (OleDbConnection connExcel = new OleDbConnection(conString))
                        {
                            using (OleDbCommand cmdExcel = new OleDbCommand())
                            {
                                using (OleDbDataAdapter odaExcel = new OleDbDataAdapter())
                                {
                                    cmdExcel.Connection = connExcel;

                                    //Get the name of First Sheet.  
                                    connExcel.Open();
                                    DataTable dtExcelSchema;
                                    dtExcelSchema = connExcel.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                                    string sheetName = dtExcelSchema.Rows[0]["TABLE_NAME"].ToString();
                                    connExcel.Close();

                                    //Read Data from First Sheet.  
                                    connExcel.Open();
                                    cmdExcel.CommandText = "SELECT * From [" + sheetName + "]";
                                    odaExcel.SelectCommand = cmdExcel;
                                    odaExcel.Fill(dt);
                                    connExcel.Close();
                                }
                            }
                        }

                        string json = JsonConvert.SerializeObject(dt);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }

                    //catch (Exception ex)  
                    //{  
                    //    throw ex;  
                    //}  
                    catch (Exception e)
                    {
                        return Json("error" + e.Message);
                    }
                    //return RedirectToAction("Index");  
                }
            }
            //return View(postedFile);  
            return View("ItemMasterIndex");
        }

        public static DataTable ToDataTable<T>(IList<T> data)
        {
            PropertyDescriptorCollection properties =
                TypeDescriptor.GetProperties(typeof(T));
            DataTable table = new DataTable();
            foreach (PropertyDescriptor prop in properties)
                table.Columns.Add(prop.Name, Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType);
            foreach (T item in data)
            {
                DataRow row = table.NewRow();
                foreach (PropertyDescriptor prop in properties)
                    row[prop.Name] = prop.GetValue(item) ?? DBNull.Value;
                table.Rows.Add(row);
            }
            return table;
        }


        MasterManagement MstrMgt = new MasterManagement();
        [HttpPost]
        public JsonResult LDItemMasterComplete(ListLDItemMaster LDIM)
        {
            CommonManagement cMgt = new CommonManagement();
            string data = String.Empty, json = String.Empty;
            JsonResult jsonResult;
            int z = 0;
            try
            {
                List<string> lstQry = new List<string>();
                DataTable dtGridLst = ToDataTable(LDIM.LDItemMasters);
                string strQry = "";

                for (int s = 0; s < dtGridLst.Rows.Count; s++)
                {

                    string Crop = dtGridLst.Rows[s]["Crop"].ToString();
                    string Item = dtGridLst.Rows[s]["Item"].ToString();
                    string ItemCode = dtGridLst.Rows[s]["ItemCode"].ToString();
                    string Uom = dtGridLst.Rows[s]["UOM"].ToString();

                    if (Crop.Trim() == string.Empty)
                    {
                        data = "Error: Crop Must Not Be Empty" + Crop;
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else if (Item.Trim() == string.Empty)
                    {
                        data = "Error: Item Must Not Be Empty" + Crop;
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else if (ItemCode.Trim() == string.Empty)
                    {
                        data = "Error: ItemCode Must Not Be Empty" + Crop;
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else if (Uom.Trim() == string.Empty)
                    {
                        data = "Error: Uom Must Not Be Empty" + Crop;
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }

                    string query = "select * from [dbo].[GPIL_Leaf_Item_Master] where [Crop] =  '" + Crop + "'and [itemcode]= '" + Item + "' ";
                    dt = cMgt.GetQueryResult(query);

                    if (dt.Rows.Count == 0)
                    {
                        string queryIns = "INSERT INTO [dbo].[GPIL_Leaf_Item_Master]([Crop],[ItemCode],[ItemName],[UOM]) VALUES";
                        queryIns += "('" + Crop + "','" + ItemCode + "','" + Item + "','" + Uom + "')";
                        lstQry.Add(queryIns);
                    }
                    else
                    {
                        data = "Error: Already Exist So please check and import";
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }

                }

                bool b = MstrMgt.UpdateUsingExecuteNonQueryList(lstQry);

                if (b)
                {
                    data = "Succuss: Data Inserted SucessFully";
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else
                {
                    return Json("Error: PLEASE CHECK EXCEL SHEET" + JsonRequestBehavior.AllowGet);
                }




            }
            catch (Exception ex)
            {
                return Json("Error: " + ex.Message.ToString(), JsonRequestBehavior.AllowGet);
            }
            return null;

        }

        /// <summary>
        /// SubsidyMaster
        /// </summary>
        /// <returns></returns>
        public ActionResult SubsidyMasterIndex()
        {
            ViewBag.GPIL_CROP_MASTERs = (from c in _context.GPIL_CROP_MASTER select new { c.CROP_YEAR }).Distinct();
           
            return View();
        }


        [HttpGet]
        public ActionResult GetItemCode()
        {
            DataSet ds = new DataSet();
            DataTable ds1 = new DataTable();
            string strsql;
            string json = "";
            CommonManagement cMgt = new CommonManagement();
            try
            {

                strsql = "SELECT [ItemCode] FROM [dbo].[GPIL_Leaf_Item_Master]";
                ds1 = cMgt.GetQueryResult(strsql);
                ds1.TableName = "Table";
                var data = ds1;
                json = JsonConvert.SerializeObject(data);

                var jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            catch (Exception ex)
            { }

            return Json(ds);
        }

        //Crop, ItemCode, Gpi, Pmi, Farmer
        [HttpPost]
        public ActionResult InsertSubsidyMaster(string crop, string itemCode, string gpi, string pmi, string farmer)
        {
            string lblMessage = string.Empty;
            string data = String.Empty, json = String.Empty;
            JsonResult jsonResult;
            try
            {

                if (crop == string.Empty)
                {
                    //CROP YEAR IS REQUIRED
                    data = "Error: Crop Is Required";
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else if (itemCode == string.Empty)
                {
                    data = "Error: Item Code Is Required";
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else if (gpi == string.Empty)
                {
                    data = "Error: GPI  Is Required";
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else if (pmi == string.Empty)
                {
                    data = "Error: PMI Is Required";
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }
                else if (farmer == string.Empty)
                {
                    data = "Error: Farmer Is Required";
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }


                //else if (gpi.Length <= 2)
                //{

                //    data = "Error: GPI Length should be 4!";
                //    json = JsonConvert.SerializeObject(data);
                //    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                //    jsonResult.MaxJsonLength = int.MaxValue;
                //    return jsonResult;
                //}
                //else if (pmi.Length <= 2)
                //{
                //    data = "Error: PMI Length should be 4!";
                //    json = JsonConvert.SerializeObject(data);
                //    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                //    jsonResult.MaxJsonLength = int.MaxValue;
                //    return jsonResult;
                //}
                //else if (farmer.Length <= 3)
                //{
                //    data = "Error: Farmer Length should be 4!";
                //    json = JsonConvert.SerializeObject(data);
                //    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                //    jsonResult.MaxJsonLength = int.MaxValue;
                //    return jsonResult;
                //}




                // int i = 0;

                if ((Convert.ToDouble(farmer) + Convert.ToDouble(pmi) + Convert.ToDouble(gpi)) == 100)
                {
                    string querychk = "SELECT  *  FROM [dbo].[GPIL_Leaf_Subsidy_Master] where [itemcode]='" + itemCode + "' And [Crop]='" + crop + "'";
                    dt = cMgt.GetQueryResult(querychk);

                    if (dt.Rows.Count == 0)
                    {
                        string queryIns = "INSERT INTO [dbo].[GPIL_Leaf_Subsidy_Master]([Crop],[itemcode],[GPI],[PMI],[Farmer])VALUES('" + crop + "','" + itemCode + "','" + gpi + "','" + pmi + "','" + farmer + "')";
                        cMgt.UpdateUsingExecuteNonQuery(queryIns);
                        // lblMessage = "Success: UPDATED SUCCESSFULLY!!!";
                        data = "Success: Data Updated Successfully !!";
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;

                    }
                    else
                    {

                        //lblMessage = "Error: Already exists!!!";
                        data = "Error: Already exists!!!";
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;

                    }
                }
                else
                {
                    //  lblMessage = "Error: Values Not Equal to 100";
                    data = "Error: Values Not Equal to 100";
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;

                }
            }
            catch (Exception ex)
            {

                lblMessage = ex.ToString();
                data = lblMessage;
                json = JsonConvert.SerializeObject(data);
                jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;


        }

        public ActionResult SubsidyMasterExcelIndex()
        {

            return View();
        }

        [HttpPost]
        public ActionResult ImportFromSubMExcel(HttpPostedFileBase postedFile)
        {
            if (ModelState.IsValid)
            {
                if (postedFile != null && postedFile.ContentLength > (1024 * 1024 * 50))  // 50MB limit  
                {
                    ModelState.AddModelError("postedFile", "Your file is to large. Maximum size allowed is 50MB !");
                }

                else
                {
                    string filePath = string.Empty;
                    string path = Server.MapPath("~/ExcelUploads/");
                    if (!Directory.Exists(path))
                    {
                        Directory.CreateDirectory(path);
                    }

                    filePath = path + Path.GetFileName(postedFile.FileName);
                    string extension = Path.GetExtension(postedFile.FileName);
                    postedFile.SaveAs(filePath);

                    string conString = string.Empty;
                    switch (extension)
                    {
                        case ".xls": //For Excel 97-03.  
                            conString = ConfigurationManager.ConnectionStrings["Excel03ConString"].ConnectionString;
                            break;
                        case ".xlsx": //For Excel 07 and above.  
                            conString = ConfigurationManager.ConnectionStrings["Excel07ConString"].ConnectionString;
                            break;
                    }

                    try
                    {
                        DataTable dt = new DataTable();
                        conString = string.Format(conString, filePath);

                        using (OleDbConnection connExcel = new OleDbConnection(conString))
                        {
                            using (OleDbCommand cmdExcel = new OleDbCommand())
                            {
                                using (OleDbDataAdapter odaExcel = new OleDbDataAdapter())
                                {
                                    cmdExcel.Connection = connExcel;

                                    //Get the name of First Sheet.  
                                    connExcel.Open();
                                    DataTable dtExcelSchema;
                                    dtExcelSchema = connExcel.GetOleDbSchemaTable(OleDbSchemaGuid.Tables, null);
                                    string sheetName = dtExcelSchema.Rows[0]["TABLE_NAME"].ToString();
                                    connExcel.Close();

                                    //Read Data from First Sheet.  
                                    connExcel.Open();
                                    cmdExcel.CommandText = "SELECT * From [" + sheetName + "]";
                                    odaExcel.SelectCommand = cmdExcel;
                                    odaExcel.Fill(dt);
                                    connExcel.Close();
                                }
                            }
                        }

                        string json = JsonConvert.SerializeObject(dt);
                        return Json(json, JsonRequestBehavior.AllowGet);
                    }

                    //catch (Exception ex)  
                    //{  
                    //    throw ex;  
                    //}  
                    catch (Exception e)
                    {
                        return Json("error" + e.Message);
                    }
                    //return RedirectToAction("Index");  
                }
            }
            //return View(postedFile);  
            return View("SubsidyMasterIndex");
        }

        [HttpPost]
        public JsonResult LDSubsidyMasterComplete(ListSubsidyMaster LSSM)
        {
            CommonManagement cMgt = new CommonManagement();
            string data = String.Empty, json = String.Empty;
            JsonResult jsonResult;
            int z = 0;
            try
            {
                List<string> lstQry = new List<string>();
                DataTable dtGridLst = ToDataTable(LSSM.SubsidyMasters);
                string strQry = "";
               // string GPI;
                for (int s = 0; s < dtGridLst.Rows.Count; s++)
                    
                {
                    string Crop = dtGridLst.Rows[s]["Crop"].ToString();
                    string ItemCategory = dtGridLst.Rows[s]["ItemCategory"].ToString();
                    //string GPI = dtGridLst.Rows[s]["GPI"].ToString();
                    string GPI = dtGridLst.Rows[s]["GPI"].ToString();
                    string PMI = dtGridLst.Rows[s]["PMI"].ToString();
                    string Farmer = dtGridLst.Rows[s]["Farmer"].ToString();

                    DataTable dtclstr = new DataTable();
                    if (Crop == string.Empty)
                    {

                        data = "Error: Crop Is Required";
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else if (ItemCategory == string.Empty)
                    {

                        data = "Error: Item Category Is Required";
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else if (GPI == string.Empty)
                    {

                        data = "Error: GPI Is Required";
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else if (PMI == string.Empty)
                    {

                        data = "Error: PMI Is Required";
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                    else if (Farmer == string.Empty)
                    {

                        data = "Error: Farmer Is Required";
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }

                    if ((Convert.ToDouble(GPI) + Convert.ToDouble(PMI) + Convert.ToDouble(Farmer)) == 100.00)
                    {

                        string querychk = "SELECT  *  FROM [dbo].[GPIL_Leaf_Subsidy_Master] where [itemcode]='" + ItemCategory + "' And [Crop]='" + Crop + "'";
                        dt = cMgt.GetQueryResult(querychk);

                        if (dt.Rows.Count == 0)
                        {
                            string query;
                            query = "INSERT INTO [GPIL_Leaf_Subsidy_Master]([Crop],[ItemCode],[GPI],[PMI],[Farmer])VALUES('" + Crop + "','" + ItemCategory + "',";
                            query += "'" + GPI + "','" + PMI + "','" + Farmer + "')";
                            cMgt.UpdateUsingExecuteNonQuery(query);
                            lblMessage = "Succuss: Data Inserted Sucessfully";
                        }

                        else
                        {
                            data = "Error: Already exists!!!";
                            json = JsonConvert.SerializeObject(data); 
                            jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                            jsonResult.MaxJsonLength = int.MaxValue;
                            return jsonResult;
                        }

                    }

                    else
                    {
                        
                         data = "Error: Please check the Subsidy Values at Item Item Category : " + ItemCategory + " And Crop : " + Crop;
                        json = JsonConvert.SerializeObject(data);
                        jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                        jsonResult.MaxJsonLength = int.MaxValue;
                        return jsonResult;
                    }
                }

                //lblMessage = "Success: Inserted Sucessfully";
                if (lblMessage.Length > 0)
                {
                    data = lblMessage;
                    json = JsonConvert.SerializeObject(data);
                    jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    jsonResult.MaxJsonLength = int.MaxValue;
                    return jsonResult;
                }

                else
                {

                    //data = "Success";
                    //json = JsonConvert.SerializeObject(data);
                    //jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                    //jsonResult.MaxJsonLength = int.MaxValue;
                    //return jsonResult;
                    return Json("Error: PLEASE CHECK EXCEL SHEET" + JsonRequestBehavior.AllowGet);

                }


            }
            catch (Exception ex)
            {
                lblMessage = ex.ToString();
                data = lblMessage;
                json = JsonConvert.SerializeObject(data);
                jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            return null;

        }

        /// <summary>
        /// PO RECEIPT
        /// </summary>
        /// <returns></returns>
        public ActionResult PoReceiptIndex()
        {

            ViewBag.GPIL_CROP_MASTERs = (from c in _context.GPIL_CROP_MASTER select new { c.CROP_YEAR }).Distinct();
            ViewBag.GPIL_ITEM_MASTERs = (from c in _context.GPIL_ITEM_MASTER select new { c.ITEM_CODE }).Distinct();
            ViewBag.GPIL_SUPPLIER_MASTERs = (from c in _context.GPIL_SUPPLIER_MASTER select new { c.SUPP_NAME }).Distinct();
            return View();
        }


        [HttpGet]
        // GET: SupplierVerification/SupplierCode.
        public ActionResult ItemCode(string itemName)
        {
            DataSet ds = new DataSet();
            DataTable ds1 = new DataTable();
            string strsql;
            string json = "";
            VerificationManagement ldMgt = new VerificationManagement();
            try
            {

                strsql = "SELECT [ItemCode],[itemname] FROM [dbo].[GPIL_Leaf_Item_Master] Where [Crop]='" + itemName + "'";
                ds1 = ldMgt.GetQueryResult(strsql);
                ds1.TableName = "Table";
                var data = ds1;
                json = JsonConvert.SerializeObject(data);

                var jsonResult = Json(json.ToString(), JsonRequestBehavior.AllowGet);
                jsonResult.MaxJsonLength = int.MaxValue;
                return jsonResult;
            }
            catch (Exception ex)
            { }

            return Json(ds);
        }

        public ActionResult PoReceiptExcelIndex()
        {

            return View();
        }

    }
}